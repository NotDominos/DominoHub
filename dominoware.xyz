--[[
most of this is NOT made by me
credits to everyone in this script
i only fixed some functions
and added other
]]

local library = loadstring(game:HttpGet(('https://pastebin.com/raw/LAFkW7xq'),true))()
local ESP = loadstring(game:HttpGet("https://kiriot22.com/releases/ESP.lua"))()

library.settings = {
    title = "dominoware.xyz",
    footer = "dominoware winning",
    modal = true,
    toggle = Enum.KeyCode.Insert,
    font = Enum.Font.Code,
    textsize = 14,
    textstroke = true
}

library.colors = {
    theme = Color3.fromRGB(119, 0, 255),
    text = Color3.fromRGB(255, 255, 255),
    main = Color3.fromRGB(20, 20, 20),
    fade = Color3.fromRGB(119, 0, 255),
    outline = Color3.fromRGB(119, 0, 255),
    tabholder = Color3.fromRGB(0, 0, 0),
    tabbutton = Color3.fromRGB(0, 0, 0),
    tabselected = Color3.fromRGB(0, 0, 0),
    scrollbar = Color3.fromRGB(0, 0, 0),
}

local MainWindow = library:CreateWindow(Vector2.new(450, 550), Vector2.new(120, 120))

local RageTab = MainWindow:CreateTab("Rage")
local LegitTab = MainWindow:CreateTab("Legit")
local VisualsTab = MainWindow:CreateTab("Visuals")
local MiscellaneousTab = MainWindow:CreateTab("Miscellaneous")
local ExploitsTab = MainWindow:CreateTab("Exploits")

-- Visuals
local VisualsTabCategoryMain = VisualsTab:AddLocalTab("Camera")
-- Misc
local MiscellaneousTabCategoryMain = MiscellaneousTab:AddLocalTab("Movement")
local MiscellaneousTabCategoryOther = MiscellaneousTab:AddLocalTab("Other")
-- Exploits
local ExploitsTabCategoryGunMods = ExploitsTab:AddLocalTab("GunMods")
local ExploitsTabCategoryOther = ExploitsTab:AddLocalTab("Other")

VisualsTabCategoryMain:AddSlider("Field Of View", 120, 80, function(val)
	workspace.CurrentCamera.FieldOfView = val
    getsenv(game.Players.LocalPlayer.PlayerGui.Client).fieldofview = val
end)


VisualsTabCategoryMain:AddToggle("Bullet Tracers", false, function(val)
    BulletTracersEnabled = val
end)

local VisualsTabCategoryViewmodel = VisualsTab:AddLocalTab("Viewmodel")

VisualsTabCategoryViewmodel:AddToggle("Enabled", false, function(val)
    ViewmodelEnabled = val
end)

VisualsTabCategoryViewmodel:AddSlider("X", 360, 180, function(val)
    ViewmodelX = val
end)

VisualsTabCategoryViewmodel:AddSlider("Y", 360, 180, function(val)
    ViewmodelY = val
end)

VisualsTabCategoryViewmodel:AddSlider("Z", 360, 180, function(val)
    ViewmodelZ = val
end)

local VisualsTabCategoryWorld = VisualsTab:AddLocalTab("World")

VisualsTabCategoryWorld:AddToggle("Nightmode", false, function(val)
    if val == true then
        game.Lighting.TimeOfDay = 20
    end
end)

VisualsTabCategoryWorld:AddCP("WorldColor", Color3.new(1,1,1), function(val)
    game.Lighting.Ambient = val
end)

local VisualsTabCategoryCategoryESP = VisualsTab:AddLocalTab("ESP")

VisualsTabCategoryCategoryESP:AddToggle("Enabled", false, function(val)
    ESP:Toggle(val)
end)

VisualsTabCategoryCategoryESP:AddToggle("Show Names", false, function(val)
    ESP.Names = val
end)

VisualsTabCategoryCategoryESP:AddToggle("Show Boxes", false, function(val)
    ESP.Boxes = val
end)

VisualsTabCategoryCategoryESP:AddToggle("Show Tracers", false, function(val)
    ESP.Tracers = val
end)

local VisualsTabCategorySounds = VisualsTab:AddLocalTab("Sounds")

VisualsTabCategorySounds:AddToggle("Hitsound", false, function(val)
    if val == true then
        game.Players.LocalPlayer.Additionals.TotalDamage.Changed:Connect(function()
			if game.Players.LocalPlayer.Additionals.TotalDamage.Value ~= 0 then
				spawn(function()
					local marker = Instance.new("Sound")
					marker.Parent = game:GetService("SoundService")
					marker.SoundId = "rbxassetid://4817809188"
					marker.Volume = 5
					marker:Play()
				end)
			end
		end)
    end
end)

VisualsTabCategorySounds:AddToggle("Killsound", false, function(val)
    if val == true then
        game.Players.LocalPlayer.Status.Kills.Changed:Connect(function(val)
			if val ~= 0 then
				spawn(function()
					local marker = Instance.new("Sound")
					marker.Parent = game:GetService("SoundService")
					marker.SoundId = "rbxassetid://2607544190"
					marker.Volume = 4
					marker:Play()
				end)
			end
		end)
    end
end)

local VisualsTabCategoryRemoveEffects = VisualsTab:AddLocalTab("Remove Effects")

VisualsTabCategoryRemoveEffects:AddToggle("Remove Flash", false, function(val)
    if val == true then
        game.ReplicatedStorage.Events.Flash:Destroy()
    end
end)

VisualsTabCategoryRemoveEffects:AddToggle("Remove Smoke", false, function(val)
    if val == true then
        game.Workspace.Ray_Ignore.Smokes:Destroy()
    end
end)

VisualsTabCategoryRemoveEffects:AddToggle("Remove Recoil", false, function(val)
    if val == true then
        game:GetService("RunService"):BindToRenderStep("NoRecoil", 100, function()
			local cbClient = getsenv(game.Players.LocalPlayer.PlayerGui.Client)
			cbClient.resetaccuracy()
			cbClient.RecoilX = 0
			cbClient.RecoilY = 0
		end)
    end
end)

VisualsTabCategoryRemoveEffects:AddToggle("Remove Scope", false, function(val)
    if val == true then
        game.Players.LocalPlayer.PlayerGui.GUI.Crosshairs.Scope.ImageTransparency = 1
        game.Players.LocalPlayer.PlayerGui.GUI.Crosshairs.Scope.Scope.ImageTransparency = 1
        game.Players.LocalPlayer.PlayerGui.GUI.Crosshairs.Scope.Scope.Blur.ImageTransparency = 1
        game.Players.LocalPlayer.PlayerGui.GUI.Crosshairs.Scope.Scope.Blur.Blur.ImageTransparency = 1
        game.Players.LocalPlayer.PlayerGui.GUI.Crosshairs.Frame1.Transparency = 1
        game.Players.LocalPlayer.PlayerGui.GUI.Crosshairs.Frame2.Transparency = 1
        game.Players.LocalPlayer.PlayerGui.GUI.Crosshairs.Frame3.Transparency = 1
        game.Players.LocalPlayer.PlayerGui.GUI.Crosshairs.Frame4.Transparency = 1
    end
end)

local VisualsTabCategoryArmsColors = VisualsTab:AddLocalTab("Arms Colors")

VisualsTabCategoryArmsColors:AddToggle("Enabled", false, function(val)
    ArmsColorsEnabled = val
end)

VisualsTabCategoryArmsColors:AddCP("Arms Color", Color3.new(1,1,1), function(val)
    ArmsColorsColor = val
end)

VisualsTabCategoryArmsColors:AddSlider("Arms Transparency", 100, 0, function(val)
    ArmsColorsTransparency = val/100
end)

VisualsTabCategoryArmsColors:AddCP("Weapons Color", Color3.new(1,1,1), function(val)
    ArmsColorsWeaponsColor = val
end)

VisualsTabCategoryArmsColors:AddSlider("Weapons Transparency", 100, 0, function(val)
    ArmsColorsWeaponsTransparency = val/100
end)

local thirdpersonenabled = false
VisualsTabCategoryMain:AddKeybind("Third Person Keybind", Enum.KeyCode.H, function(val)
	thirdpersonenabled = not thirdpersonenabled
	if thirdpersonenabled == true then
		local distance = 10
			game:GetService("RunService"):BindToRenderStep("ThirdPerson", 100, function()
			if game.Players.LocalPlayer.CameraMinZoomDistance ~= distance then
				game.Players.LocalPlayer.CameraMinZoomDistance = distance
				game.Players.LocalPlayer.CameraMaxZoomDistance = distance
				workspace.ThirdPerson.Value = true
			end
		end)
	else
		game:GetService("RunService"):UnbindFromRenderStep("ThirdPerson")
		game.Players.LocalPlayer.CameraMinZoomDistance = 0
		game.Players.LocalPlayer.CameraMaxZoomDistance = 0
		workspace.ThirdPerson.Value = false
	end
end)

local RageTabCategoryMain = RageTab:AddLocalTab("Silent Aim")

RageTabCategoryMain:AddToggle("Enabled", false, function(val)
    --[[
    if val == true then
        local function PLR_VISIBLE(plr)
			local IgnoreList = {game:GetService("Players").LocalPlayer.Character}
			local NewRay = Ray.new(workspace.CurrentCamera.CFrame.p, (plr.Character.HumanoidRootPart.Position - workspace.CurrentCamera.CFrame.p).unit * 2048)
			local FindPart = workspace:FindPartOnRayWithIgnoreList(NewRay, IgnoreList)
			
			if FindPart and FindPart:IsDescendantOf(plr.Character) then
				return true
			end
			
			return false
		end

		while true do
			wait()
			pcall(function()
			for i,v in pairs(game.Players:GetPlayers()) do
				if v.Team ~= game.Players.LocalPlayer.Team and v.Character and v.Character:FindFirstChild("Humanoid") and v.Character.Humanoid.Health > 0 and PLR_VISIBLE(v) == true then
					local WeaponName = game.Players.LocalPlayer.Character.EquippedTool.Value
					
					if game.ReplicatedStorage.Weapons[WeaponName]:FindFirstChild("Chamber") and (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - v.Character.HumanoidRootPart.Position).magnitude > 10 then
						return
					end
					
                    if nigga == true then
					game.ReplicatedStorage.Events.HitPart:FireServer(unpack({
						[1] = v.Character.Head,
						[2] = v.Character.Head.Position,
						[3] = WeaponName,
						[4] = 100,
						[5] = game.Players.LocalPlayer.Character.Gun,
						[6] = 1,
						[7] = 1,
						[8] = 1,
						[9] = 1,
						[10] = false,
						[11] = Vector3.new(),
						[12] = math.rad(1,100000),
						[13] = Vector3.new()
					}))
					
					-- getsenv(game.Players.LocalPlayer.PlayerGui:WaitForChild("Client")).firebullet()
					wait(game.ReplicatedStorage.Weapons[WeaponName].FireRate.Value)
                    end
				end
			end
			end)
		end
	end
    ]]

    if _G.silentaim_exe == nil then
        _G.silentaim_exe = true

        local Players = game:GetService("Players")
        local LocalPlayer = Players.LocalPlayer
        local mouse = LocalPlayer:GetMouse()
        local Camera = workspace.CurrentCamera
        local Debris = game:GetService("Debris")
        local UserInputService = game:GetService("UserInputService")
        local target = false
        local RunService = game:GetService("RunService")
        
        local features = {
        silentaim = true;
        fov = 999999;
        }
        
        function getnearest()
        local nearestmagnitude = math.huge
        local nearestenemy = nil
        local vector = nil
        for i,v in next, Players:GetChildren() do
        if v ~= Players.LocalPlayer then
        if v.Character and  v.Character:FindFirstChild("HumanoidRootPart") and v.Character:FindFirstChild("Humanoid") and v.Character.Humanoid.Health > 0 then
        local vector, onScreen = Camera:WorldToScreenPoint(v.Character["HumanoidRootPart"].Position)
        if onScreen then
        local ray = Ray.new(
        Camera.CFrame.p,
        (v.Character["Head"].Position-Camera.CFrame.p).unit*500
        )
        local ignore = {
        LocalPlayer.Character,
        }
        local hit,position,normal=workspace:FindPartOnRayWithIgnoreList(ray,ignore)
        if hit and hit:FindFirstAncestorOfClass("Model") and Players:FindFirstChild(hit:FindFirstAncestorOfClass("Model").Name)then
        local magnitude = (Vector2.new(mouse.X, mouse.Y) - Vector2.new(vector.X, vector.Y)).magnitude
        if magnitude < nearestmagnitude and magnitude <= features["fov"] then
        nearestenemy = v
        nearestmagnitude = magnitude
        end
        end
        end
        end
        end
        end
        return nearestenemy
        end
        
        
        local meta = getrawmetatable(game)
        setreadonly(meta, false)
        local oldNamecall = meta.__namecall
        meta.__namecall = newcclosure(function(...)
        local method = getnamecallmethod()
        local args = {...}
        if string.find(method,'Ray') then
        if target then
        args[2] = Ray.new(workspace.CurrentCamera.CFrame.Position, (target + Vector3.new(0,(workspace.CurrentCamera.CFrame.Position-target).Magnitude/500,0) - workspace.CurrentCamera.CFrame.Position).unit * 500)
        end
        end
        return oldNamecall(unpack(args))
        end)
        
        RunService:BindToRenderStep("silentaim",1,function()
        if UserInputService:IsMouseButtonPressed(0) and features["silentaim"] and Players.LocalPlayer.Character and Players.LocalPlayer.Character:FindFirstChild("Humanoid") and Players.LocalPlayer.Character.Humanoid.Health > 0 then
        local enemy = getnearest()
        if enemy and enemy.Character and enemy.Character:FindFirstChild("Humanoid") and enemy.Character.Humanoid.Health > 0 and _G.silentaim == true then                
        local vector, onScreen = Camera:WorldToScreenPoint(enemy.Character["Head"].Position)
        local magnitude = (Vector2.new(mouse.X, mouse.Y) - Vector2.new(vector.X, vector.Y)).magnitude
        target = workspace[enemy.Name]["Head"].Position
        end
        else
        target = nil
        end
        end)
    end

    _G.silentaim = val
end)

RageTabCategoryMain:AddToggle("Auto Wall", false, function(val)
    if _G.autowall_exe == nil then
        _G.autowall_exe = true

        enabled = true

        local plrs=game:GetService("Players")
        local plr=plrs.LocalPlayer
        local client = getsenv(game.Players.LocalPlayer.PlayerGui.Client)
        local loop
        local norapid=0
        local CC=game.Workspace.CurrentCamera
        
        game['Run Service'].Stepped:connect(function()
        pcall(function()
        for _,v in pairs(plrs:GetChildren()) do
        if v~=plr then
        if v:FindFirstChild("Status") then
        if v.Status.Team.Value~=plr.Status.Team.Value then
        if workspace:FindFirstChild(plr.Name) then
        if plr.Character:FindFirstChild("Humanoid") then
        if plr.Character.Humanoid.Health>0 then
        if plr.Character:FindFirstChild("LowerTorso") then
        if workspace:FindFirstChild(v.Name) then
        if v.Character:FindFirstChild("Humanoid") then
        if v.Character:FindFirstChild("LowerTorso") then
        if v.Character.Humanoid.Health>0.1 then
        for _,o in pairs(v.Character:GetChildren()) do
        if o:IsA"Part" or o:IsA"MeshPart" then
        if o.Name~="Gun" or o.Parent.Name~="Gun" or o.Name~="Gun2" or o.Parent.Name~="Gun2" then
        local ray = Ray.new(
               plr.Character.Head.Position,
               (o.Position-plr.Character.Head.Position).unit*500
            ) 
        local ignore=plr.Character
        local hit,position,normal=workspace:FindPartOnRay(ray,ignore)
        if hit.Parent==v.Character or hit==o or hit.Name=="btTICK" then
        if _G.autowall == true then
        if norapid==0 then
        if v.Character.Humanoid.Health>0.1 then
        local Remote = game.ReplicatedStorage.Events['HitPart']
        local Arguments = {
            [1] = workspace[v.Name]["Head"],
            [2] = workspace[v.Name]["Head"].Position,
            [3] = workspace[game.Players.LocalPlayer.Name].EquippedTool.Value,
            [4] = 100,
            [5] = workspace[game.Players.LocalPlayer.Name].Gun,
            [8] = 1,
            [9] = false,
            [10] = false,
            [11] = Vector3.new(),
            [12] = 100,
            [13] = Vector3.new()
            }
            Remote:FireServer(unpack(Arguments))
        client.firebullet()
        end
        end
        end
        end
        end
        end
        end
        end
        end
        end
        end
        end
        end
        end
        end
        end
        end
        end
        end
        end)
        end)
    end

    _G.autowall = val
end)

antiaim = false
RageTabCategoryMain:AddToggle("Anti-Aim", false, function(val)
    antiaim = val
    if _G.executed5 == nil then
        _G.executed5 = true

        game['Run Service'].Stepped:connect(function()
            if antiaim == true then
                game:GetService("ReplicatedStorage").Events.ControlTurn:FireServer("2.5")
            end
        end)
    end
end)

local LegitTabCategoryMain = LegitTab:AddLocalTab("SemiRage")

local Player = game.Players.LocalPlayer
local Mouse = Player:GetMouse()
local CurrentCamera = game.Workspace.CurrentCamera
local AimbotEnabled = false
local AimbotTargetPart = "Head"

function GetNearestPlayerToMouse()
	local players = {}
	local plrhld = {}
	local dists = {}
	for i, v in pairs(game.Players:GetPlayers()) do
		if v~=Player then
			table.insert(players,v)
		end
	end
	for i, v in pairs(players) do
		if v and (v.Character)~=nil then
			local head = v.Character:FindFirstChild("Head")
			if head~=nil then
				local dist = (head.Position-game.Workspace.CurrentCamera.CoordinateFrame.p).magnitude
				plrhld[v.Name..i] = {}
				plrhld[v.Name..i].dist = dist
				plrhld[v.Name..i].plr=v
				local ray = Ray.new(game.Workspace.CurrentCamera.CoordinateFrame.p,(Mouse.Hit.p-game.Workspace.CurrentCamera.CoordinateFrame.p).unit*dist)
				local hit,pos = game.Workspace:FindPartOnRay(ray,game.Workspace)
				local diff = math.floor((pos-head.Position).magnitude)
				plrhld[v.Name..i].diff=diff
				table.insert(dists,diff)
			end
		end
	end
	if unpack(dists) == nil then
		return false
	end
	local ldist = math.floor(math.min(unpack(dists)))
	if ldist > 20 then
		return false
	end
	for i,v in pairs(plrhld) do
		if v.diff == ldist then
			return v.plr
		end
	end
	return false
end

function AIMBOT_LOOP()
	local Target = GetNearestPlayerToMouse()
	if Target ~= false then
		local TargetPart = Target.Character:FindFirstChild(AimbotTargetPart)
		if TargetPart then
			game.Workspace.CurrentCamera.CoordinateFrame = CFrame.new(game.Workspace.CurrentCamera.CoordinateFrame.p, TargetPart.CFrame.p)
		end
	end
end

Mouse.Button1Down:Connect(function()
	AimbotEnabled = true
end)

Mouse.Button1Up:Connect(function()
	AimbotEnabled = false
end) 

LegitTabCategoryMain:AddToggle("Enabled", false, function(val)
	if val == true then
		AIMBOT_LOOP_SET = game:GetService("RunService").RenderStepped:connect(AIMBOT_LOOP)
	else
		if AIMBOT_LOOP_SET then
			AIMBOT_LOOP_SET:Disconnect()
		end 
	end
end)

LegitTabCategoryMain:AddDropdown("Target Part", 1, {"Head", "HumanoidRootPart"}, function(val)
    AimbotTargetPart = val
end)

local LegitTabCategoryMain = LegitTab:AddLocalTab("Legit")

LegitTabCategoryMain:AddToggle("Trigger Bot", false, function(state)
    triggerbot = state

    local plrs = game:GetService("Players")
    local lplr = plrs.LocalPlayer
    local Mouse = lplr:GetMouse()
    game:GetService("RunService").RenderStepped:Connect(function()
    for i,v in pairs(plrs:GetChildren()) do
    if Mouse.Target ~= nil and v.Character ~= nil and lplr.Character ~= nil and (Mouse.Target).Parent == v.Character and v.Character.Humanoid.Health ~= 0 and lplr.Character.Humanoid.Health ~= 0 and v.Team ~= lplr.Team then
    if triggerbot == true then
    mouse1press()
    wait()
    mouse1release()
    end
    end
    end
    end)
end)

--[[
LegitTabCategoryMain:AddToggle("Backtrack", false, function(val)
    if val == true then
        local BacktrackFolder = Instance.new("Folder")
		BacktrackFolder.Parent = workspace
		BacktrackFolder.Name = "BacktrackFolder"

		spawn(function()
			while true do
				wait()
				for i,v in pairs(game.Players:GetPlayers()) do
					pcall(function()
						if v.Character and v.Character.Humanoid and v.Character.Humanoid.Health > 0 and v.TeamColor ~= game.Players.LocalPlayer.TeamColor then
							local BacktrackPart = Instance.new("Part")
							BacktrackPart.Name = v.Name
							BacktrackPart.Anchored = true
							BacktrackPart.CanCollide = false
							BacktrackPart.Position = v.Character.Head.Position
							BacktrackPart.Orientation = v.Character.Head.Orientation
							BacktrackPart.Size = Vector3.new(1, 1, 1)
							BacktrackPart.Transparency = 0.5
							BacktrackPart.BrickColor = BrickColor.new("Institutional white")
							BacktrackPart.Material = "SmoothPlastic"
							BacktrackPart.Parent = BacktrackFolder

							local BacktrackTag = Instance.new("ObjectValue")
							BacktrackTag.Parent = BacktrackPart
							BacktrackTag.Name = "PlayerName"
							BacktrackTag.Value = v

							spawn(function()
								wait(500/1000)
								BacktrackPart:Destroy()
							end)
						end
					end)
				end
			end
		end)
	end
end)
]]

--[[
LegitTabCategoryMain:AddToggle("Fix Hitreg", false, function(val)
    if val == true then
        local BacktrackFolder = Instance.new("Folder")
		BacktrackFolder.Parent = workspace
		BacktrackFolder.Name = "BacktrackFolder"

		spawn(function()
			while true do
				wait()
				for i,v in pairs(game.Players:GetPlayers()) do
					pcall(function()
						if v.Character and v.Character.Humanoid and v.Character.Humanoid.Health > 0 and v.TeamColor ~= game.Players.LocalPlayer.TeamColor then
							local BacktrackPart = Instance.new("Part")
							BacktrackPart.Name = v.Name
							BacktrackPart.Anchored = true
							BacktrackPart.CanCollide = false
							BacktrackPart.Position = v.Character.Head.Position
							BacktrackPart.Orientation = v.Character.Head.Orientation
							BacktrackPart.Size = Vector3.new(1, 1, 1)
							BacktrackPart.Transparency = 0.5
							BacktrackPart.BrickColor = BrickColor.new("Institutional white")
							BacktrackPart.Material = "SmoothPlastic"
							BacktrackPart.Parent = BacktrackFolder

							local BacktrackTag = Instance.new("ObjectValue")
							BacktrackTag.Parent = BacktrackPart
							BacktrackTag.Name = "PlayerName"
							BacktrackTag.Value = v

							spawn(function()
								wait(0/0)
								BacktrackPart:Destroy()
							end)
						end
					end)
				end
			end
		end)
	end
end)
]]

game.Workspace.CurrentCamera.ChildAdded:Connect(function(ViewmodelFolder)
	spawn(function()
		if ViewmodelFolder.Name == 'Arms' and ArmsColorsEnabled == true then
			for i,v in pairs(ViewmodelFolder:GetChildren()) do
				if v:IsA("Model") and v:FindFirstChild("Left Arm") and v:FindFirstChild("Right Arm") then
					-- Arms Pointer
					local RightArm = v["Right Arm"]
					local LeftArm = v["Left Arm"]
					-- Gloves Pointer
					local RightGlove = RightArm:FindFirstChild("Glove") or RightArm:FindFirstChild("RGlove")
					local LeftGlove = LeftArm:FindFirstChild("Glove") or LeftArm:FindFirstChild("LGlove")
					-- Sleeves Pointer
					local RightSleeve = RightArm:FindFirstChild("Sleeve") or nil
					local LeftSleeve = LeftArm:FindFirstChild("Sleeve") or nil
					
					RightArm.Transparency = ArmsColorsTransparency
					RightArm.Reflectance = 0
					RightArm.Mesh.TextureId = ""
					RightArm.Color = ArmsColorsColor
					RightArm.Material = "Neon"
					
					LeftArm.Transparency = ArmsColorsTransparency
					LeftArm.Reflectance = 0
					LeftArm.Mesh.TextureId = ""
					LeftArm.Color = ArmsColorsColor
					LeftArm.Material = "Neon"
					
					RightGlove.Transparency = ArmsColorsTransparency
					RightGlove.Reflectance = 0
					RightGlove.Mesh.TextureId = ""
					RightGlove.Color = ArmsColorsColor
					RightGlove.Material = "Neon"
					
					LeftGlove.Transparency = ArmsColorsTransparency
					LeftGlove.Reflectance = 0
					LeftGlove.Mesh.TextureId = ""
					LeftGlove.Color = ArmsColorsColor
					LeftGlove.Material = "Neon"
					
					if RightSleeve and LeftSleeve then
					
					RightSleeve.Transparency = ArmsColorsTransparency
					RightSleeve.Reflectance = 0
					RightSleeve.Mesh.TextureId = ""
					RightSleeve.Color = ArmsColorsColor
					RightSleeve.Material = "Neon"
					
					LeftSleeve.Transparency = ArmsColorsTransparency
					LeftSleeve.Reflectance = 0
					LeftSleeve.Mesh.TextureId = ""
					LeftSleeve.Color = ArmsColorsColor
					LeftSleeve.Material = "Neon"
					
					end
				end
				if v:IsA("BasePart") and v.Name ~= ("Right Arm" or "Left Arm" or "Flash") and v.Transparency~=1 then -- Weapons Pointer
					local Weapons = v
					
					if Weapons:IsA("MeshPart") then Weapons.TextureID = "" end
					if Weapons:FindFirstChildOfClass("SpecialMesh") then Weapons:FindFirstChildOfClass("SpecialMesh").TextureId = "" end
					
					Weapons.Transparency = ArmsColorsWeaponsTransparency
					Weapons.Reflectance = 0
					Weapons.Color = ArmsColorsWeaponsColor
					Weapons.Material = "ForceField"
					
				end
			end
		end
	end)
end)

MiscellaneousTabCategoryMain:AddToggle("Bunnyhop", false, function(val)
    if val == true then
        	for i,v in pairs(game.ReplicatedStorage.Weapons:GetDescendants()) do
		if v:IsA("ValueBase") then
			local originalvalue = Instance.new(tostring(v.ClassName),v)
			originalvalue.Name = '__org'
			originalvalue.Value = v.Value
		end
	end

	for i,v in pairs(game.ReplicatedStorage.HUInfo:GetDescendants()) do
		if v:IsA("ValueBase") then
			local originalvalue = Instance.new(tostring(v.ClassName),v)
			originalvalue.Name = '__org'
			originalvalue.Value = v.Value
		end
	end

	game:GetService("RunService"):BindToRenderStep("BunnyHop", 10000, function()
		pcall(function()
			if game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.Space) and game.Players.LocalPlayer.Character.Humanoid.Jumping then
				for _, v in pairs(game.ReplicatedStorage.HUInfo:GetChildren()) do
					v.WalkSpeed.Value = 500000
				end
				game.Players.LocalPlayer.Character.Humanoid.Jump = true
			else
				for _, v in pairs(game.ReplicatedStorage.HUInfo:GetChildren()) do
					v.WalkSpeed.Value = v.WalkSpeed["__org"].Value
				end
			end
		end)
	end)
    end
end)

MiscellaneousTabCategoryOther:AddButton("Unlock All", function()
    if not getrawmetatable or not getsenv or not readfile or not writefile then game.Players.LocalPlayer:Kick("Exploit not supported!") end

    local LocalPlayer = game:GetService("Players").LocalPlayer
    local Client = getsenv(game.Players.LocalPlayer.PlayerGui.Client)
    local ReplicatedStorage = game:GetService("ReplicatedStorage")

    local allSkins = {
       {'P2000_Stock'},
       {'P2000_Camo Dipped'},
       {'P2000_Candycorn'},
       {'P2000_Golden Age'},
       {'P2000_Ruby'},
       {'P2000_Apathy'},
       {'P2000_Dark Beast'},
       {'P2000_Lunar'},
       {'P2000_Pinkie'},
       {'P2000_Comet'},
       {'P2000_Silence'},
       {'USP_Stock'},
       {'USP_Crimson'},
       {'USP_Racing'},
       {'USP_Frostbite'},
       {'USP_Dizzy'},
       {'USP_Unseen'},
       {'USP_Jade Dream'},
       {'USP_Skull'},
       {'USP_Paradise'},
       {'USP_Holiday'},
       {'USP_Kraken'},
       {'USP_Nighttown'},
       {'USP_Worlds Away'},
       {'USP_Yellowbelly'},
       {'Glock_Stock'},
       {'Glock_White Sauce'},
       {'Glock_Gravestomper'},
       {'Glock_Money Maker'},
       {'Glock_Rush'},
       {'Glock_Tarnish'},
       {'Glock_Spacedust'},
       {'Glock_Wetland'},
       {'Glock_Desert Camo'},
       {'Glock_Midnight Tiger'},
       {'Glock_Day Dreamer'},
       {'Glock_Angler'},
       {'Glock_Anubis'},
       {'Glock_Underwater'},
       {'Glock_Biotrip'},
       {'Glock_RSL'},
       {'Glock_Scapter'},
       {'DualBerettas_Stock'},
       {'DualBerettas_Carbonized'},
       {'DualBerettas_Hexline'},
       {'DualBerettas_Old Fashioned'},
       {'DualBerettas_Neon web'},
       {'DualBerettas_Xmas'},
       {'DualBerettas_Floral'},
       {'DualBerettas_Dusty Manor'},
       {'P250_Stock'},
       {'P250_Solstice'},
       {'P250_Goldish'},
       {'P250_Frosted'},
       {'P250_Green Web'},
       {'P250_Shark'},
       {'P250_Amber'},
       {'P250_Bomber'},
       {'P250_Equinox'},
       {'P250_TC250'},
       {'FiveSeven_Stock'},
       {'FiveSeven_Sub Zero'},
       {'FiveSeven_Autumn Fade'},
       {'FiveSeven_Gifted'},
       {'FiveSeven_Midnight Ride'},
       {'FiveSeven_Stigma'},
       {'FiveSeven_Fluid'},
       {'FiveSeven_Mr. Anatomy'},
       {'FiveSeven_Summer'},
       {'FiveSeven_Danjo'},
       {'Tec9_Stock'},
       {'Tec9_Phol'},
       {'Tec9_Stocking Stuffer'},
       {'Tec9_Charger'},
       {'Tec9_Ironline'},
       {'Tec9_Samurai'},
       {'Tec9_Skintech'},
       {'Tec9_Gift Wrapped'},
       {'Tec9_Performer'},
       {'CZ_Stock'},
       {'CZ_Orange Web'},
       {'CZ_Festive'},
       {'CZ_Hallow'},
       {'CZ_Holidays'},
       {'CZ_Spectre'},
       {'CZ_Designed'},
       {'CZ_Lightning'},
       {'DesertEagle_Stock'},
       {'DesertEagle_Pumpkin Buster'},
       {'DesertEagle_Cool Blue'},
       {'DesertEagle_Glittery'},
       {'DesertEagle_ROLVe'},
       {'DesertEagle_Cold Truth'},
       {'DesertEagle_Heat'},
       {'DesertEagle_Honor-bound'},
       {'DesertEagle_Xmas'},
       {'DesertEagle_Grim'},
       {'DesertEagle_Survivor'},
       {'DesertEagle_Independence'},
       {'DesertEagle_Racer'},
       {'DesertEagle_Krystallos'},
       {'DesertEagle_DropX'},
       {'DesertEagle_TC'},
       {'DesertEagle_Weeb'},
       {'DesertEagle_Skin Committee'},
       {'DesertEagle_Scapter'},
       {'R8_Stock'},
       {'R8_Spades'},
       {'R8_Hunter'},
       {'R8_TG'},
       {'R8_Violet'},
       {'R8_Exquisite'},
       {'MP9_Stock'},
       {'MP9_Blueroyal'},
       {'MP9_Cob Web'},
       {'MP9_SnowTime'},
       {'MP9_Velvita'},
       {'MP9_Decked Halls'},
       {'MP9_Wilderness'},
       {'MP9_Vaporwave'},
       {'MAC10_Stock'},
       {'MAC10_Wetland'},
       {'MAC10_Turbo'},
       {'MAC10_Skeleboney'},
       {'MAC10_Artists Intent'},
       {'MAC10_Blaze'},
       {'MAC10_Golden Rings'},
       {'MP7-SD_Stock'},
       {'MP7_Stock'},
       {'MP7_Silent Ops'},
       {'MP7_Reindeer'},
       {'MP7_Trauma'},
       {'MP7_Sunshot'},
       {'MP7_Holiday'},
       {'UMP_Stock'},
       {'UMP_Gum Drop'},
       {'UMP_Militia Camo'},
       {'UMP_Death Grip'},
       {'UMP_Magma'},
       {'UMP_Redline'},
       {'UMP_Molten'},
       {'P90_Stock'},
       {'P90_Redcopy'},
       {'P90_Skulls'},
       {'P90_Argus'},
       {'P90_Elegant'},
       {'P90_Northern Lights'},
       {'P90_Pine'},
       {'P90_P-Chan'},
       {'P90_Krampus'},
       {'P90_Demon Within'},
       {'Bizon_Stock'},
       {'Bizon_Shattered'},
       {'Bizon_Festive'},
       {'Bizon_Saint Nick'},
       {'Bizon_Sergeant'},
       {'Bizon_Autumic'},
       {'Bizon_Oblivion'},
       {'Nova_Stock'},
       {'Nova_Paradise'},
       {'Nova_Starry Night'},
       {'Nova_Black Ice'},
       {'Nova_Sharkesh'},
       {'Nova_Tricked'},
       {'Nova_Terraformer'},
       {'Nova_Tiger'},
       {'Nova_Cookie'},
       {'XM_Stock'},
       {'XM_Red'},
       {'XM_Spectrum'},
       {'XM_Campfire'},
       {'XM_Atomic'},
       {'XM_Predator'},
       {'XM_Artic'},
       {'XM_Endless Night'},
       {'XM_MK11'},
       {'MAG7_Stock'},
       {'MAG7_Outbreak'},
       {'MAG7_Striped'},
       {'MAG7_C4UTION'},
       {'MAG7_Frosty'},
       {'MAG7_Bombshell'},
       {'MAG7_Molten'},
       {'SawedOff_Stock'},
       {'SawedOff_Opal'},
       {'SawedOff_Colorboom'},
       {'SawedOff_Sullys Blacklight'},
       {'SawedOff_Casino'},
       {'SawedOff_Spooky'},
       {'SawedOff_Executioner'},
       {'M249_Stock'},
       {'M249_Lantern'},
       {'M249_P2020'},
       {'M249_Wolf'},
       {'M249_Spooky'},
       {'M249_Aggressor'},
       {'Negev_Stock'},
       {'Negev_Default'},
       {'Negev_Wetland'},
       {'Negev_Midnightbones'},
       {'Negev_Quazar'},
       {'Negev_Striped'},
       {'Negev_Winterfell'},
       {'Famas_Stock'},
       {'Famas_Haunted Forest'},
       {'Famas_Goliath'},
       {'Famas_KugaX'},
       {'Famas_Medic'},
       {'Famas_Toxic Rain'},
       {'Famas_Abstract'},
       {'Famas_Imprisioned'},
       {'Famas_Redux'},
       {'Famas_Shocker'},
       {'Famas_Cogged'},
       {'Famas_Centipede'},
       {'Famas_MK11'},
       {'Galil_Stock'},
       {'Galil_Hardware'},
       {'Galil_Hardware 2'},
       {'Galil_Toxicity'},
       {'Galil_Worn'},
       {'Galil_Frosted'},
       {'M4A4_Stock'},
       {'M4A4_Mistletoe'},
       {'M4A4_Desert Camo'},
       {'M4A4_RayTrack'},
       {'M4A4_Toy Soldier'},
       {'M4A4_Ice Cap'},
       {'M4A4_Stardust'},
       {'M4A4_Pinkvision'},
       {'M4A4_Pinkie'},
       {'M4A4_Devil'},
       {'M4A4_Flashy Ride'},
       {'M4A4_Pondside'},
       {'M4A4_Candyskull'},
       {'M4A4_Precision'},
       {'M4A4_Racer'},
       {'M4A4_King'},
       {'M4A4_BOT[S]'},
       {'M4A4_Endline'},
       {'M4A4_Quicktime'},
       {'M4A4_Delinquent'},
       {'M4A4_Jester'},
       {'M4A4_Scapter'},
       {'M4A1_Stock'},
       {'M4A1_Desert Camo'},
       {'M4A1_Tecnician'},
       {'M4A1_Animatic'},
       {'M4A1_Necropolis'},
       {'M4A1_Impulse'},
       {'M4A1_Toucan'},
       {'M4A1_Wastelander'},
       {'M4A1_Lunar'},
       {'M4A1_Jester'},
       {'M4A1_Heavens Gate'},
       {'AK47_Stock'},
       {'AK47_Code Orange'},
       {'AK47_Maker'},
       {'AK47_Gifted'},
       {'AK47_Ugly Sweater'},
       {'AK47_Scythe'},
       {'AK47_Clown'},
       {'AK47_Ghost'},
       {'AK47_Ace'},
       {'AK47_Patch'},
       {'AK47_Eve'},
       {'AK47_Inversion'},
       {'AK47_Halo'},
       {'AK47_Shooting Star'},
       {'AK47_Quantum'},
       {'AK47_Plated'},
       {'AK47_Mean Green'},
       {'AK47_Bloodboom'},
       {'AK47_Outrunner'},
       {'AK47_Precision'},
       {'AK47_Secret Santa'},
       {'AK47_Survivor'},
       {'AK47_Yltude'},
       {'AK47_Quicktime'},
       {'AK47_Godess'},
       {'AK47_Glo'},
       {'AK47_Hypersonic'},
       {'AK47_Outlaws'},
       {'AK47_Hallows'},
       {'AK47_Variant Camo'},
       {'AK47_Jester'},
       {'AK47_Toxic Nitro'},
       {'AK47_Skin Committee'},
       {'AK47_VAV'},
       {'AK47_Scapter'},
       {'Scout_Stock'},
       {'Scout_Railgun'},
       {'Scout_Coffin Biter'},
       {'Scout_Hot Cocoa'},
       {'Scout_Flowing Mists'},
       {'Scout_Theory'},
       {'Scout_Posh'},
       {'Scout_Pulse'},
       {'Scout_Monstruo'},
       {'Scout_Neon Regulation'},
       {'Scout_Hellborn'},
       {'Scout_Xmas'},
       {'AUG_Stock'},
       {'AUG_Maker'},
       {'AUG_Dream Hound'},
       {'AUG_Graffiti'},
       {'AUG_Homestead'},
       {'AUG_Enlisted'},
       {'AUG_Phoenix'},
       {'AUG_Chilly Night'},
       {'AUG_Mystique'},
       {'AUG_Sunsthetic'},
       {'AUG_NightHawk'},
       {'SG_Stock'},
       {'SG_Magma'},
       {'SG_Variant Camo'},
       {'SG_Knighthood'},
       {'SG_Kitty Cat'},
       {'SG_Dummy'},
       {'SG_Yltude'},
       {'SG_Drop-Out'},
       {'SG_DropX'},
       {'AWP_Stock'},
       {'AWP_Abaddon'},
       {'AWP_Coffin Biter'},
       {'AWP_Desert Camo'},
       {'AWP_Autumness'},
       {'AWP_Northern Lights'},
       {'AWP_Forever'},
       {'AWP_Pear Tree'},
       {'AWP_Lunar'},
       {'AWP_Venomus'},
       {'AWP_Darkness'},
       {'AWP_Pink Vision'},
       {'AWP_Bloodborne'},
       {'AWP_Instinct'},
       {'AWP_Dark Galaxy'},
       {'AWP_Regina'},
       {'AWP_Retroactive'},
       {'AWP_Dragon'},
       {'AWP_Grepkin'},
       {'AWP_Illusion'},
       {'AWP_Hika'},
       {'AWP_Difference'},
       {'AWP_Racer'},
       {'AWP_Pinkie'},
       {'AWP_Silence'},
       {'AWP_Kumanjayi'},
       {'AWP_Blastech'},
       {'AWP_JTF2'},
       {'AWP_Weeb'},
       {'AWP_Quicktime'},
       {'AWP_Toxic Nitro'},
       {'AWP_Nerf'},
       {'AWP_Scapter'},
       {'AWP_Blue'},
       {'G3SG1_Stock'},
       {'G3SG1_Autumn'},
       {'G3SG1_Foliage'},
       {'G3SG1_Amethyst'},
       {'G3SG1_Hex'},
       {'G3SG1_Holly Bound'},
       {'G3SG1_Mahogany'},
       {'CTGlove_Stock'},
       {'TGlove_Stock'},
       {'Fingerless Glove_Digital'},
       {'Fingerless Glove_Patch'},
       {'Fingerless Glove_Crystal'},
       {'Fingerless Glove_Scapter'},
       {'Strapped Glove_Wisk'},
       {'Strapped Glove_Molten'},
       {'Strapped Glove_Grim'},
       {'Strapped Glove_Kringle'},
       {'Strapped Glove_Drop-Out'},
       {'Strapped Glove_Racer'},
       {'Sports Glove_Hallows'},
       {'Sports Glove_Weeb'},
       {'Sports Glove_Pumpkin'},
       {'Sports Glove_Skulls'},
       {'Sports Glove_RSL'},
       {'Sports Glove_CottonTail'},
       {'Sports Glove_Royal'},
       {'Sports Glove_Majesty'},
       {'Sports Glove_Hazard'},
       {'Handwraps_Guts'},
       {'Handwraps_Wetland'},
       {'Handwraps_Mummy'},
       {'Handwraps_MMA'},
       {'Handwraps_Toxic Nitro'},
       {'Handwraps_Ghoul Hex'},
       {'Handwraps_Phantom Hex'},
       {'Handwraps_Spector Hex'},
       {'Handwraps_Orange Hex'},
       {'Handwraps_Purple Hex'},
       {'Handwraps_Green Hex'},
       {'Handwraps_Wraps'},
       {'Handwraps_ARMS REMOVER'},
       {'Karambit_Consumed'},
       {'Karambit_Goo'},
       {'Karambit_Ciro'},
       {'Karambit_Hallows'},
       {'Karambit_Jester'},
       {'Karambit_Quicktime'},
       {'Karambit_Pizza'},
       {'Karambit_Peppermint'},
       {'Karambit_Racer'},
       {'Karambit_Ruby'},
       {'Karambit_Bloodwidow'},
       {'Karambit_Stock'},
       {'Karambit_Marbleized'},
       {'Karambit_Wetland'},
       {'Karambit_Naval'},
       {'Karambit_Drop-Out'},
       {'Karambit_Frozen Dream'},
       {'Karambit_Crippled Fade'},
       {'Karambit_Jade Dream'},
       {'Karambit_Splattered'},
       {'Karambit_Worn'},
       {'Karambit_Liberty Camo'},
       {'Karambit_Neonic'},
       {'Karambit_Glossed'},
       {'Karambit_Cosmos'},
       {'Karambit_Twitch'},
       {'Karambit_Crimson Tiger'},
       {'Karambit_Lantern'},
       {'Karambit_Topaz'},
       {'Karambit_Tropical'},
       {'Karambit_Festive'},
       {'Karambit_Egg Shell'},
       {'Karambit_Gold'},
       {'Karambit_Death Wish'},
       {'Karambit_Digital'},
       {'Karambit_Scapter'},
       {'Butterfly Knife_Wetland'},
       {'Butterfly Knife_Marbleized'},
       {'Butterfly Knife_Goo'},
       {'Butterfly Knife_Argus'},
       {'Butterfly Knife_Jade Dream'},
       {'Butterfly Knife_Crippled Fade'},
       {'Butterfly Knife_Hallows'},
       {'Butterfly Knife_Consumed'},
       {'Butterfly Knife_Ruby'},
       {'Butterfly Knife_Bloodwidow'},
       {'Butterfly Knife_White Boss'},
       {'Butterfly Knife_Stock'},
       {'Butterfly Knife_Snowfall'},
       {'Butterfly Knife_Frozen Dream'},
       {'Butterfly Knife_Naval'},
       {'Butterfly Knife_Wrapped'},
       {'Butterfly Knife_Neonic'},
       {'Butterfly Knife_Icicle'},
       {'Butterfly Knife_Cosmos'},
       {'Butterfly Knife_Twitch'},
       {'Butterfly Knife_Freedom'},
       {'Butterfly Knife_Worn'},
       {'Butterfly Knife_Crimson Tiger'},
       {'Butterfly Knife_Aurora'},
       {'Butterfly Knife_Egg Shell'},
       {'Butterfly Knife_Scapter'},
       {'Butterfly Knife_Reaper'},
       {'Butterfly Knife_Tropical'},
       {'Butterfly Knife_Topaz'},
       {'Butterfly Knife_Inversion'},
       {'Butterfly Knife_Splattered'},
       {'Butterfly Knife_Digital'},
       {'Falchion Knife_Stock'},
       {'Falchion Knife_Goo'},
       {'Falchion Knife_Wetland'},
       {'Falchion Knife_Marbleized'},
       {'Falchion Knife_Naval'},
       {'Falchion Knife_Frozen Dream'},
       {'Falchion Knife_Chosen'},
       {'Falchion Knife_Inversion'},
       {'Falchion Knife_Bloodwidow'},
       {'Falchion Knife_Hallows'},
       {'Falchion Knife_Pumpkin'},
       {'Falchion Knife_Cocoa'},
       {'Falchion Knife_Crippled Fade'},
       {'Falchion Knife_Ruby'},
       {'Falchion Knife_Consumed'},
       {'Falchion Knife_Racer'},
       {'Falchion Knife_Toxic Nitro'},
       {'Falchion Knife_Cosmos'},
       {'Falchion Knife_Late Night'},
       {'Falchion Knife_Coal'},
       {'Falchion Knife_Neonic'},
       {'Falchion Knife_Wrapped'},
       {'Falchion Knife_Freedom'},
       {'Falchion Knife_Worn'},
       {'Falchion Knife_Crimson Tiger'},
       {'Falchion Knife_Festive'},
       {'Falchion Knife_Egg Shell'},
       {'Falchion Knife_Topaz'},
       {'Falchion Knife_Tropical'},
       {'Falchion Knife_Zombie'},
       {'Falchion Knife_Splattered'},
       {'Falchion Knife_Digital'},
       {'Bayonet_Aequalis'},
       {'Bayonet_Goo'},
       {'Bayonet_UFO'},
       {'Bayonet_Delinquent'},
       {'Bayonet_Hallows'},
       {'Bayonet_Racer'},
       {'Bayonet_Mariposa'},
       {'Bayonet_Ghastly'},
       {'Bayonet_Intertwine'},
       {'Bayonet_Decor'},
       {'Bayonet_Geo Blade'},
       {'Bayonet_Frozen Dream'},
       {'Bayonet_Consumed'},
       {'Bayonet_Marbleized'},
       {'Bayonet_Wetland'},
       {'Bayonet_Naval'},
       {'Bayonet_Stock'},
       {'Bayonet_Banner'},
       {'Bayonet_Neonic'},
       {'Bayonet_Cosmos'},
       {'Bayonet_Sapphire'},
       {'Bayonet_Twitch'},
       {'Bayonet_Egg Shell'},
       {'Bayonet_Silent Night'},
       {'Bayonet_Tropical'},
       {'Bayonet_Splattered'},
       {'Bayonet_Crow'},
       {'Bayonet_Topaz'},
       {'Bayonet_Wrapped'},
       {'Bayonet_Festive'},
       {'Bayonet_RSL'},
       {'Bayonet_Crimson Tiger'},
       {'Bayonet_Worn'},
       {'Bayonet_Digital'},
       {'Bayonet_Easy-Bake'},
       {'Bayonet_Candy Cane'},
       {'Huntsman Knife_Stock'},
       {'Huntsman Knife_Ciro'},
       {'Huntsman Knife_Goo'},
       {'Huntsman Knife_Hallows'},
       {'Huntsman Knife_Marbleized'},
       {'Huntsman Knife_Wetland'},
       {'Huntsman Knife_Geo Blade'},
       {'Huntsman Knife_Naval'},
       {'Huntsman Knife_Frozen Dream'},
       {'Huntsman Knife_Drop-Out'},
       {'Huntsman Knife_Spirit'},
       {'Huntsman Knife_Consumed'},
       {'Huntsman Knife_Bloodwidow'},
       {'Huntsman Knife_Ruby'},
       {'Huntsman Knife_Crippled Fade'},
       {'Huntsman Knife_Cozy'},
       {'Huntsman Knife_Cosmos'},
       {'Huntsman Knife_Crimson Tiger'},
       {'Huntsman Knife_Worn'},
       {'Huntsman Knife_Splattered'},
       {'Huntsman Knife_Twitch'},
       {'Huntsman Knife_Egg Shell'},
       {'Huntsman Knife_Monster'},
       {'Huntsman Knife_Tropical'},
       {'Huntsman Knife_Honor Fade'},
       {'Huntsman Knife_Aurora'},
       {'Huntsman Knife_Wrapped'},
       {'Huntsman Knife_Digital'},
       {'Huntsman Knife_Glossed'},
       {'Gut Knife_Stock'},
       {'Gut Knife_Splattered'},
       {'Gut Knife_Rusty'},
       {'Gut Knife_Frozen Dream'},
       {'Gut Knife_Naval'},
       {'Gut Knife_Geo Blade'},
       {'Gut Knife_Marbleized'},
       {'Gut Knife_Wetland'},
       {'Gut Knife_Goo'},
       {'Gut Knife_Hallows'},
       {'Gut Knife_Consumed'},
       {'Gut Knife_Bloodwidow'},
       {'Gut Knife_Ruby'},
       {'Gut Knife_Holly'},
       {'Gut Knife_Crippled Fade'},
       {'Gut Knife_Egg Shell'},
       {'Gut Knife_Lurker'},
       {'Gut Knife_Tropical'},
       {'Gut Knife_Topaz'},
       {'Gut Knife_Neonic'},
       {'Gut Knife_Present'},
       {'Gut Knife_Banner'},
       {'Gut Knife_Cosmos'},
       {'Gut Knife_Worn'},
       {'Gut Knife_Crimson Tiger'},
       {'Gut Knife_Wrapped'},
       {'Gut Knife_Digital'},
       {'CTKnife_Stock'},
       {'TKnife_Stock'},
       {'Bearded Axe_Stock'},
       {'Bearded Axe_Splattered'},
       {'Bearded Axe_Beast'},
       {'Sickle_Stock'},
       {'Sickle_Splattered'},
       {'Sickle_Mummy'},
       {'Cleaver_Stock'},
       {'Cleaver_Splattered'},
       {'Cleaver_Spider'},
       {'Flip Knife_Stock'},
       {'Banana_Stock'}
    }

    local isUnlocked

    local mt = getrawmetatable(game)
    local oldNamecall = mt.__namecall
    setreadonly(mt, false)

    local isUnlocked

    mt.__namecall = newcclosure(function(self, ...)
       local args = {...}
       if getnamecallmethod() == "InvokeServer" and tostring(self) == "Hugh" then
        return
       end
       if getnamecallmethod() == "FireServer" then
        if args[1] == LocalPlayer.UserId then
            return
        end
        if string.len(tostring(self)) == 38 then
            if not isUnlocked then
             isUnlocked = true
             for i,v in pairs(allSkins) do
              local doSkip
              for i2,v2 in pairs(args[1]) do
                  if v[1] == v2[1] then
                   doSkip = true
                  end
              end
              if not doSkip then
                  table.insert(args[1], v)
              end
             end
            end
            return
        end
        if tostring(self) == "DataEvent" and args[1][4] then
            local currentSkin = string.split(args[1][4][1], "_")[2]
            if args[1][2] == "Both" then
             LocalPlayer["SkinFolder"]["CTFolder"][args[1][3]].Value = currentSkin
             LocalPlayer["SkinFolder"]["TFolder"][args[1][3]].Value = currentSkin
            else
             LocalPlayer["SkinFolder"][args[1][2] .. "Folder"][args[1][3]].Value = currentSkin
            end
        end
       end
       return oldNamecall(self, ...)
    end)
    
    setreadonly(mt, true)

    Client.CurrentInventory = allSkins

    local TClone, CTClone = LocalPlayer.SkinFolder.TFolder:Clone(), game.Players.LocalPlayer.SkinFolder.CTFolder:Clone()
    LocalPlayer.SkinFolder.TFolder:Destroy()
    LocalPlayer.SkinFolder.CTFolder:Destroy()
    TClone.Parent = LocalPlayer.SkinFolder
    CTClone.Parent = LocalPlayer.SkinFolder
    wait(1)

    local karacirounlocker = game.ReplicatedStorage.Skins.Karambit.Ciro.Animated:Destroy()

    game.StarterGui:SetCore("SendNotification", {
        Title = "dominoware.xyz";
        Text = "Skins Unlocked";
        Icon = "";
        Duration = 5;
    })
end)

ExploitsTabCategoryGunMods:AddButton("Firerate", function()
    FireRate = 0.07

    for i,v in pairs(game.ReplicatedStorage.Weapons:GetChildren()) do
        if v:FindFirstChild("Ammo") and v:FindFirstChild("Recoil") then
            v.FireRate.Value = FireRate
        end
    end
end)

ExploitsTabCategoryGunMods:AddButton("Reload Time", function()
    ReloadTime = 0.1

    for i,v in pairs(game.ReplicatedStorage.Weapons:GetChildren()) do
        if v:FindFirstChild("Ammo") and v:FindFirstChild("Recoil") then
            v.ReloadTime.Value = ReloadTime
        end
    end
end)

ExploitsTabCategoryGunMods:AddButton("Ammo", function()
    Ammo = 500

    for i,v in pairs(game.ReplicatedStorage.Weapons:GetChildren()) do
        if v:FindFirstChild("Ammo") and v:FindFirstChild("Recoil") then
            v.Ammo.Value = Ammo
        end
    end
end)

ExploitsTabCategoryGunMods:AddButton("Stored Ammo", function()
    StoredAmmo = 1500

    for i,v in pairs(game.ReplicatedStorage.Weapons:GetChildren()) do
        if v:FindFirstChild("Ammo") and v:FindFirstChild("Recoil") then
            v.StoredAmmo.Value = StoredAmmo
        end
    end
end)


ExploitsTabCategoryOther:AddButton("Kill All", function()
    local Remote = game.ReplicatedStorage.Events['HitPart']

    for _,v in pairs(game:GetService"Players":GetChildren()) do
    if v.Team ~= game.Players.LocalPlayer.Team then
    if v.Character and v.Character.Head then
    local Arguments = {
    [1] = workspace[v.Name].Head,
    [2] = workspace[v.Name].Head.Position,
    [3] = workspace[game.Players.LocalPlayer.Name].EquippedTool.Value,
    [4] = math.rad(1,100000),
    [5] = workspace[game.Players.LocalPlayer.Name].Gun,
    [8] = 8, --damage multiplier
    [9] = false,
    [10] = false,
    [11] = Vector3.new(),
    [12] = math.rad(1,100000),
    [13] = Vector3.new()
}

Remote:FireServer(unpack(Arguments))
end
end
end
end)

MiscellaneousTabCategoryOther:AddButton("Resolver", function()
    game.ReplicatedStorage.Events.Drop:FireServer(game.ReplicatedStorage.Weapons.Discombobulator, game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame, 0, 0, false, game.Players.LocalPlayer, false, false)
end)

ExploitsTabCategoryOther:AddButton("Teleport To Enemy Spawn", function()
     local CT = game.Workspace.Map.CTSpawns
local T = game.Workspace.Map.TSpawns
local Team1 = game.Teams['Counter-Terrorists']
local Team2 = game.Teams['Terrorists']
local Player = game.Players.LocalPlayer
local PlayerCharacter = Player.Character.HumanoidRootPart

if Player.Team == Team1 then 
    PlayerCharacter.CFrame = T:FindFirstChildOfClass('Part').CFrame 
elseif Player.Team == Team2 then 
    PlayerCharacter.CFrame = CT:FindFirstChildOfClass('Part').CFrame
end 
end)

-- tracers

function createBeam(p1, p2)
	local beam = Instance.new("Part", workspace)
	beam.Anchored = true
	beam.CanCollide = false
	beam.Material = Enum.Material.Neon
	beam.Color = Color3.fromRGB(255, 255, 255)
	beam.Size = Vector3.new(0.1, 0.1, (p1 - p2).magnitude)
	beam.CFrame = CFrame.new(p1, p2) * CFrame.new(0, 0, -beam.Size.Z / 2)
	return beam
end

local mt = getrawmetatable(game)
local oldNamecall = mt.__namecall

setreadonly(mt, false)

mt.__namecall = newcclosure(function(self, ...)
    local method = getnamecallmethod()
    local callingscript = getcallingscript()
    local args = {...}
	
	if not checkcaller() then
		if method == "SetPrimaryPartCFrame" and self.Name == "Arms" and ViewmodelEnabled == true then
			args[1] = args[1] * CFrame.new(Vector3.new(math.rad(ViewmodelX-180), math.rad(ViewmodelY-180), math.rad(ViewmodelZ-180)))
		elseif method == "FireServer" and self.Name == "HitPart" then
			spawn(function()
				if BulletTracersEnabled == true then
					local beam = createBeam(game.Players.LocalPlayer.Character.Head.CFrame.p, args[2])
					for i = 1, 60 * 1 do
						wait()
						beam.Transparency = i / (60 * 1)
					end
					beam:Destroy()
				end
			end)
			
			if args[1].Parent == workspace.BacktrackFolder then
				--if args[1].PlayerName.Value.Character and args[1].PlayerName.Value.Character.Head ~= nil then
				--	args[1] = args[1].PlayerName.Value.Character.Head
				--end
			end
		elseif method == "InvokeServer" and self.Name == "Moolah" then
			return wait(99e99)
		elseif method == "Kick" then
			return
		elseif method == "FireServer" and self.Name == "ControlTurn" and SECHS == true then
			return
		end
	end
    
    return oldNamecall(self, unpack(args))
end)
